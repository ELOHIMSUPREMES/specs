#
#   - Class-Method-Modifiers -
#   This spec file was automatically generated by cpan2rpm [ver: 2.027]
#   (ALT Linux revision)
#   The following arguments were used:
#       Class::Method::Modifiers
#   For more information on cpan2rpm please visit: http://perl.arix.com/
#

%define module Class-Method-Modifiers
%define m_distro Class-Method-Modifiers
%define m_name Class-Method-Modifiers
%define m_author_id unknown
%define _enable_test 1

Name: perl-Class-Method-Modifiers
Version: 1.09
Release: alt1

Summary: provides Moose-like method modifiers

License: Artistic
Group: Development/Perl
Url: http://www.cpan.org

Packager: Denis Smirnov <mithraen@altlinux.ru>

BuildArch: noarch
Source: http://search.cpan.org//CPAN/authors/id/S/SA/SARTAK/%m_distro-%version.tar.gz

BuildRequires: perl-Pod-Escapes perl-Test-Fatal

%description
Method modifiers are a convenient feature from the CLOS (Common Lisp Object
System) world.

In its most basic form, a method modifier is just a method that calls
`$self->SUPER::foo(@_)'. I for one have trouble remembering that exact
invocation, so my classes seldom re-dispatch to their base classes. Very bad!

`Class::Method::Modifiers' provides three modifiers: `before', `around', and
`after'. `before' and `after' are run just before and after the method they
modify, but can not really affect that original method. `around' is run in
place of the original method, with a hook to easily call that original method.
See the `MODIFIERS' section for more details on how the particular modifiers
work.

One clear benefit of using `Class::Method::Modifiers' is that you can define
multiple modifiers in a single namespace. These separate modifiers don't need
to know about each other. This makes top-down design easy. Have a base class
that provides the skeleton methods of each operation, and have plugins modify
those methods to flesh out the specifics.

Parent classes need not know about `Class::Method::Modifiers'. This means you
should be able to modify methods in *any* subclass. See
the Term::VT102::ZeroBased manpage for an example of subclassing with CMM.

In short, `Class::Method::Modifiers' solves the problem of making sure you
call `$self->SUPER::foo(@_)', and provides a cleaner interface for it.

As of version 1.00, `Class::Method::Modifiers' is faster in some cases than
the Moose manpage. See `benchmark/method_modifiers.pl' in the the Moose manpage distribution.

%prep
%setup -q -n %m_distro-%version
%build
%perl_vendor_build

%install
%perl_vendor_install

%files
%perl_vendor_privlib/Class/Method/Modifiers.pm

%changelog
* Thu Apr 12 2012 Vladimir Lettiev <crux@altlinux.ru> 1.09-alt1
- 1.06 -> 1.09

* Sat Jan 01 2011 Denis Smirnov <mithraen@altlinux.ru> 1.06-alt1
- initial build for ALT Linux Sisyphus

