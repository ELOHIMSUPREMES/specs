BuildRequires: mojo-maven2-plugin-jdepend mojo-maven2-plugin-rat
BuildRequires: /proc jetty6-servlet-2.5-api
BuildRequires: jpackage-compat
# Copyright (c) 2000-2010, JPackage Project
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of the JPackage Project nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

%define with()          %{expand:%%{?with_%{1}:1}%%{!?with_%{1}:0}}
%define without()       %{expand:%%{?with_%{1}:0}%%{!?with_%{1}:1}}
%define bcond_with()    %{expand:%%{?_with_%{1}:%%global with_%{1} 1}}
%define bcond_without() %{expand:%%{!?_without_%{1}:%%global with_%{1} 1}}

%bcond_without maven
#def_with gcj_support
%bcond_with gcj_support
%bcond_without repolib

%define repodir %{_javadir}/repository.jboss.com/apache-%{base_name}/%{version}-brew
%define repodirlib %{repodir}/lib
%define repodirres %{repodir}/resources
%define repodirsrc %{repodir}/src

%if %with gcj_support
%define gcj_support 0
%else
%define gcj_support 0
%endif

%define base_name jci
%define short_name commons-%{base_name}

Name:           apache-commons-jci
Version:        1.1
Release:	alt3_0.r831715.4jpp6
Epoch:          0
Summary:        Apache Commons Java Compiler Interface
License:        ASL 2.0
Url:            http://commons.apache.org/jci/
Group:          Development/Java
Source0:        commons-jci-1.1-src.tar.gz
# svn export http://svn.apache.org/repos/asf/commons/proper/jci/trunk commons-jci-1.1-src
Source1:        %{name}-settings.xml
Source2:        %{name}-jpp-depmap.xml
Source3:        %{name}-component-info.xml
Source4:        %{short_name}-autogenerated-files.tar.gz
Patch0:         apache-commons-jci-core-pom.patch
Patch1:         commons-jci-1.1-JaninoCompilationProblem.patch
Patch2:         commons-jci-1.1-JavacClassLoader.patch
Patch3:         apache-commons-jci-pom.patch
BuildRequires: jpackage-utils >= 0:1.7.5
BuildRequires: fonts-ttf-liberation
BuildRequires: ant >= 0:1.7
BuildRequires: ant-junit
BuildRequires: junit
%if %with maven
BuildRequires: apache-commons-parent >= 0:12
BuildRequires: maven2-common-poms
BuildRequires: maven2 >= 0:2.0.8
BuildRequires: maven2-default-skin
BuildRequires: maven2-plugin-ant
BuildRequires: maven2-plugin-antrun
BuildRequires: maven2-plugin-compiler
BuildRequires: maven2-plugin-idea
BuildRequires: maven2-plugin-install
BuildRequires: maven2-plugin-jar
BuildRequires: maven2-plugin-javadoc
BuildRequires: maven2-plugin-jxr
BuildRequires: maven2-plugin-pmd
BuildRequires: maven2-plugin-project-info-reports
BuildRequires: maven2-plugin-resources
BuildRequires: maven2-plugin-site
BuildRequires: maven-surefire-maven-plugin
BuildRequires: maven-surefire-provider-junit
BuildRequires: maven-surefire-report-maven-plugin
BuildRequires: maven2-default-skin
BuildRequires: maven-plugin-cobertura
BuildRequires: mojo-maven2-plugin-taglist
BuildRequires: jetty6-maven2-plugins
%endif
BuildRequires: asm2
BuildRequires: apache-commons-cli
BuildRequires: apache-commons-io
BuildRequires: apache-commons-lang
BuildRequires: jakarta-commons-logging
BuildRequires: groovy15
BuildRequires: ecj
BuildRequires: janino
BuildRequires: rhino
BuildRequires: geronimo-servlet-2.5-api
BuildRequires: geronimo-jsp-2.0-api
BuildRequires: vafer-dependency
%if %{gcj_support}
BuildRequires: java-gcj-compat-devel
%else
BuildArch:      noarch
%endif
Requires(post): jpackage-utils >= 0:1.7.5
Requires(postun): jpackage-utils >= 0:1.7.5

Requires: apache-commons-io
Requires: apache-commons-lang
Requires: jakarta-commons-logging
Provides:       jakarta-%{short_name} = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name} < %{epoch}:%{version}-%{release}
Provides:       %{short_name} = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name} < %{epoch}:%{version}-%{release}
Source44: import.info

%description
JCI is a java compiler interface featuring a compiling classloader.
The current implementation supports compilation via the following 
compilers:
* eclipse
* janino
* javac
* groovy15
* rhino

%package compiler-eclipse
Summary:        ECJ Module for %{name}
Group:          Development/Java
Requires: %{name} = %{epoch}:%{version}-%{release}
Requires: ecj
Provides:       jakarta-%{short_name}-compiler-eclipse = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-compiler-eclipse < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-compiler-eclipse = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-compiler-eclipse < %{epoch}:%{version}-%{release}

%description compiler-eclipse
%{summary}.

%package compiler-groovy
Summary:        Groovy JSR Module for %{name}
Group:          Development/Java
Requires: %{name} = %{epoch}:%{version}-%{release}
Requires: groovy15
Provides:       jakarta-%{short_name}-compiler-groovy = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-compiler-groovy < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-compiler-groovy = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-compiler-groovy < %{epoch}:%{version}-%{release}

%description compiler-groovy
%{summary}.

%package compiler-janino
Summary:        Janino Module for %{name}
Group:          Development/Java
Requires: %{name} = %{epoch}:%{version}-%{release}
Requires: janino
Provides:       jakarta-%{short_name}-compiler-janino = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-compiler-janino < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-compiler-janino = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-compiler-janino < %{epoch}:%{version}-%{release}

%description compiler-janino
%{summary}.

%package compiler-rhino
Summary:        Rhino Module for %{name}
Group:          Development/Java
Requires: %{name} = %{epoch}:%{version}-%{release}
Requires: rhino
Provides:       jakarta-%{short_name}-compiler-rhino = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-compiler-rhino < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-compiler-rhino = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-compiler-rhino < %{epoch}:%{version}-%{release}

%description compiler-rhino
%{summary}.

%package javadoc
Summary:        Javadoc for %{name}
Group:          Development/Documentation
Provides:       jakarta-%{short_name}-javadoc = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-javadoc < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-javadoc = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-javadoc < %{epoch}:%{version}-%{release}
BuildArch: noarch

%description javadoc
%{summary}.

%if %with repolib
%package repolib
Summary:        Artifacts to be uploaded to a repository library
Group:          Development/Java
Provides:       jakarta-%{short_name}-repolib = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-repolib < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-repolib = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-repolib < %{epoch}:%{version}-%{release}

%description repolib
Artifacts to be uploaded to a repository library.
This package is not meant to be installed but so its contents
can be extracted through rpm2cpio.
%endif

%if %with maven
%package manual
Summary:        Documents for %{name}
Group:          Development/Documentation
Provides:       jakarta-%{short_name}-manual = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-manual < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-manual = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-manual < %{epoch}:%{version}-%{release}
BuildArch: noarch

%description manual
%{summary}.
%endif

%package demo
Summary:        Examples for %{name}
Group:          Development/Java
Requires: %{name} = %{epoch}:%{version}-%{release}
Requires: %{name}-compiler-eclipse = %{epoch}:%{version}-%{release}
Requires: apache-commons-cli
Requires: servlet_2_4_api
Provides:       jakarta-%{short_name}-demo = %{epoch}:%{version}-%{release}
Obsoletes:      jakarta-%{short_name}-demo < %{epoch}:%{version}-%{release}
Provides:       %{short_name}-demo = %{epoch}:%{version}-%{release}
Obsoletes:      %{short_name}-demo < %{epoch}:%{version}-%{release}

%description demo
%{summary}.

%prep
%setup -q -n %{short_name}-%{version}-src

%patch0 -b .sav0
%patch1 -b .sav1
%patch2 -b .sav2
%patch3 -b .sav3
%if %with maven
%else
tar xzf %{SOURCE4}
%endif

#sed -i -e 's,</parent>,<relativePath>../../core/pom.xml</relativePath></parent>,' compilers/*/pom.xml

sed -i -e 's,<module>compilers/,<module>,' pom.xml
mv compilers/* .

%build
%if %with maven
export MAVEN_REPO_LOCAL=$(pwd)/.m2/repository
mvn-jpp -Dmaven.compile.target=1.5 -Dmaven.javadoc.source=1.5  \
        -e \
        -Dmaven.test.failure.ignore=true \
        -Dmaven2.jpp.depmap.file=%{SOURCE2} \
        -Dmaven.repo.local=$MAVEN_REPO_LOCAL \
        install
# disabled site
#mvn-jpp -Dmaven.compile.target=1.5 -Dmaven.javadoc.source=1.5  \
#        -e \
#        -Dmaven.test.failure.ignore=true \
#        -Dmaven2.jpp.depmap.file=%{SOURCE2} \
#        -Dmaven.repo.local=$MAVEN_REPO_LOCAL \
#        site
###       ant:ant site
%else
export OPT_JAR_LIST="ant/ant-junit junit"
export CLASSPATH=$(build-classpath \
commons-io \
commons-lang \
commons-logging-api \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
pushd fam
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

export CLASSPATH=$(build-classpath \
objectweb-asm/asm \
commons-io \
commons-lang \
commons-logging-api \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
CLASSPATH=$CLASSPATH:$(pwd)/fam/target/%{short_name}-fam-%{version}.jar
pushd core
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

pushd compilers

export CLASSPATH=$(build-classpath \
ecj \
commons-logging-api \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/%{short_name}-core-%{version}.jar
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/test-classes
pushd eclipse
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

export CLASSPATH=$(build-classpath \
janino \
commons-logging-api \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/%{short_name}-core-%{version}.jar
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/test-classes
pushd janino
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

export CLASSPATH=$(build-classpath \
groovy15-all \
commons-logging-api \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/%{short_name}-core-%{version}.jar
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/test-classes
pushd groovy
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

export CLASSPATH=$(build-classpath \
asm2/asm2 \
asm2/asm2-analysis \
asm2/asm2-util \
commons-logging-api \
vafer-dependency \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/%{short_name}-core-%{version}.jar
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/test-classes
pushd javac
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

export CLASSPATH=$(build-classpath \
commons-logging-api \
js \
)
CLASSPATH=$CLASSPATH:target/classes:target/test-classes
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/%{short_name}-core-%{version}.jar
CLASSPATH=$CLASSPATH:$(pwd)/../core/target/test-classes
pushd rhino
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd

popd

export CLASSPATH=$(build-classpath \
commons-cli \
servlet_2_4_api \
)
CLASSPATH=$CLASSPATH:$(pwd)/fam/target/%{short_name}-fam-%{version}.jar
CLASSPATH=$CLASSPATH:$(pwd)/core/target/%{short_name}-core-%{version}.jar
pushd examples
ant -Dant.build.javac.source=1.5 -Dant.build.javac.target=1.5 -Dmaven.settings.offline=true -Dbuild.sysclasspath=only jar javadoc
popd
%endif

%install

%if %with maven
NAMEDVER=%{version}-SNAPSHOT
%else
NAMEDVER=%{version}
%endif
# jars
install -d -m 755 %{buildroot}%{_javadir}
%add_to_maven_depmap org.apache.commons %{short_name} %{version} JPP %{short_name}

install -m 644 fam/target/%{short_name}-fam-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-fam-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-fam %{version} JPP %{short_name}-fam
install -m 644 core/target/%{short_name}-core-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-core-%{version}.jar
install -m 644 core/target/%{short_name}-core-${NAMEDVER}-tests.jar \
           %{buildroot}%{_javadir}/%{name}-core-tests-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-core %{version} JPP %{short_name}-core

install -m 644 javac/target/%{short_name}-javac-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-javac-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-javac %{version} JPP %{short_name}-javac
install -m 644 eclipse/target/%{short_name}-eclipse-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-eclipse-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-eclipse %{version} JPP %{short_name}-eclipse
install -m 644 groovy/target/%{short_name}-groovy-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-groovy-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-groovy %{version} JPP %{short_name}-groovy
install -m 644 janino/target/%{short_name}-janino-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-janino-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-janino %{version} JPP %{short_name}-janino
install -m 644 rhino/target/%{short_name}-rhino-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-rhino-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-rhino %{version} JPP %{short_name}-rhino
install -m 644 examples/target/%{short_name}-examples-${NAMEDVER}.jar \
           %{buildroot}%{_javadir}/%{name}-examples-%{version}.jar
%add_to_maven_depmap org.apache.commons %{short_name}-examples %{version} JPP %{short_name}-examples

(cd %{buildroot}%{_javadir} && for jar in apache-*; do ln -sf ${jar} $(echo $jar | sed -e 's/apache-/jakarta-/'); done)
(cd %{buildroot}%{_javadir} && for jar in apache-*; do ln -sf ${jar} $(echo $jar | sed -e 's/apache-//'); done)
(cd %{buildroot}%{_javadir} && for jar in *-%{version}*; do ln -sf ${jar} $(echo $jar | sed -e 's/-%{version}//'); done)

# pom
install -d -m 755 %{buildroot}%{_datadir}/maven2/poms
install -m 644 pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}.pom
install -m 644 fam/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-fam.pom
install -m 644 core/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-core.pom
install -m 644 javac/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-javac.pom
install -m 644 eclipse/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-eclipse.pom
install -m 644 groovy/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-groovy.pom
install -m 644 janino/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-janino.pom
install -m 644 rhino/pom.xml %{buildroot}%{_datadir}/maven2/poms/JPP-%{short_name}-rhino.pom

# javadoc
install -d -m 755 %{buildroot}%{_javadocdir}/%{name}-%{version}
%if %with maven
#cp -pr target/site/apidocs/* %{buildroot}%{_javadocdir}/%{name}-%{version}
#rm -rf target/site/apidocs
%else
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/fam
cp -pr fam/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/fam
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/core
cp -pr core/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/core
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-eclipse
cp -pr compilers/eclipse/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-eclipse
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-groovy
cp -pr compilers/groovy/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-groovy
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-janino
cp -pr compilers/janino/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-janino
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-javac
cp -pr compilers/javac/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-javac
install -d -m 755 \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-rhino
cp -pr compilers/rhino/target/site/apidocs/* \
       %{buildroot}%{_javadocdir}/%{name}-%{version}/compiler-rhino
%endif
ln -s %{name}-%{version} %{buildroot}%{_javadocdir}/%{name}
ln -s %{name}-%{version} %{buildroot}%{_javadocdir}/%{short_name}
ln -s %{name}-%{version} %{buildroot}%{_javadocdir}/%{short_name}-%{version}
ln -s %{name}-%{version} %{buildroot}%{_javadocdir}/jakarta-%{short_name}
ln -s %{name}-%{version} %{buildroot}%{_javadocdir}/jakarta-%{short_name}-%{version}

## manual
install -d -m 755 %{buildroot}%{_docdir}/%{name}-%{version}
install -m 644 LICENSE.txt %{buildroot}%{_docdir}/%{name}-%{version}
%if %with maven
#cp -pr target/site %{buildroot}%{_docdir}/%{name}-%{version}
%endif

%if %with repolib
%{__mkdir_p} %{buildroot}%{repodir}
%{__mkdir_p} %{buildroot}%{repodirlib}
%{__install} -p -m 0644 %{SOURCE3} %{buildroot}%{repodir}/component-info.xml
tag=`/bin/echo %{name}-%{version}-%{release} | %{__sed} 's|\.|_|g'`
%{__sed} -i "s/@TAG@/$tag/g" %{buildroot}%{repodir}/component-info.xml
%{__sed} -i "s/@VERSION@/%{version}-brew/g" %{buildroot}%{repodir}/component-info.xml
%{__mkdir_p} %{buildroot}%{repodirsrc}
%{__install} -p -m 0644 %{PATCH0} %{buildroot}%{repodirsrc}/
%{__install} -p -m 0644 %{SOURCE0} %{buildroot}%{repodirsrc}/
%{__cp} -p %{buildroot}%{_javadir}/*.jar %{buildroot}%{repodirlib}/
%endif

%if %{gcj_support}
%{_bindir}/aot-compile-rpm
%endif

%files
%doc %{_docdir}/%{name}-%{version}/LICENSE.txt
%{_javadir}/*fam*.jar
%{_javadir}/*core*.jar
%{_javadir}/*javac*.jar
%{_datadir}/maven2/*
%{_mavendepmapfragdir}/*
%if %{gcj_support}
%dir %{_libdir}/gcj/%{name}
%{_libdir}/gcj/%{name}/apache-commons-lang-%{version}.jar.db
%{_libdir}/gcj/%{name}/apache-commons-lang-%{version}.jar.so
%endif
# hack; explicitly added docdir if not owned
%doc %dir %{_docdir}/%{name}-%{version}

%files compiler-eclipse
%{_javadir}/*eclipse*.jar

%files compiler-groovy
%{_javadir}/*groovy*.jar

%files compiler-janino
%{_javadir}/*janino*.jar

%files compiler-rhino
%{_javadir}/*rhino*.jar

%files javadoc
%{_javadocdir}/*

%if %with maven
#files manual
#%doc %{_docdir}/%{name}-%{version}/site
%endif
# hack; explicitly added docdir if not owned
#%doc %dir %{_docdir}/%{name}-%{version}

%files demo
%{_javadir}/*examples*.jar

%if %with repolib
%files repolib
%{_javadir}/repository.jboss.com
%endif

%changelog
* Wed Apr 04 2012 Igor Vlasenko <viy@altlinux.ru> 0:1.1-alt3_0.r831715.4jpp6
- fixed build with new asm

* Tue Mar 20 2012 Igor Vlasenko <viy@altlinux.ru> 0:1.1-alt2_0.r831715.4jpp6
- fixed build with maven3

* Wed Feb 23 2011 Igor Vlasenko <viy@altlinux.ru> 0:1.1-alt1_0.r831715.4jpp6
- new version

